const { Pool } = require('pg');
require('dotenv').config();

// Configura√ß√£o do pool de conex√µes PostgreSQL
const pool = new Pool({
    // Usar DATABASE_URL se dispon√≠vel (Render/produ√ß√£o) ou configura√ß√µes individuais
    connectionString: process.env.DATABASE_URL || process.env.RENDER_DATABASE_URL,
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
    port: process.env.DB_PORT || 5432,

    // Configura√ß√µes do pool
    max: 20, // M√°ximo de conex√µes simult√¢neas
    idleTimeoutMillis: 30000, // Tempo limite para conex√µes ociosas
    connectionTimeoutMillis: 2000, // Tempo limite para estabelecer conex√£o

    // Configura√ß√µes SSL para produ√ß√£o (Render)
    ssl: process.env.NODE_ENV === 'production' ? {
        rejectUnauthorized: false
    } : false
});

// Eventos do pool para debugging
pool.on('connect', (client) => {
    console.log('üîó Nova conex√£o PostgreSQL estabelecida');
});

pool.on('error', (err, client) => {
    console.error('‚ùå Erro na conex√£o PostgreSQL:', err);
    process.exit(-1);
});

// Fun√ß√£o para testar a conex√£o
const testConnection = async () => {
    try {
        const client = await pool.connect();
        const result = await client.query('SELECT NOW()');
        client.release();
        console.log('‚úÖ Conex√£o com PostgreSQL estabelecida com sucesso');
        console.log('üïê Timestamp do servidor:', result.rows[0].now);
        return true;
    } catch (err) {
        console.error('‚ùå Erro ao conectar com PostgreSQL:', err.message);
        return false;
    }
};

// Fun√ß√£o para executar queries com tratamento de erro
const query = async (text, params) => {
    const start = Date.now();
    try {
        const result = await pool.query(text, params);
        const duration = Date.now() - start;

        if (process.env.NODE_ENV === 'development') {
            console.log('üîç Query executada:', {
                text: text.substring(0, 50) + '...',
                duration: duration + 'ms',
                rows: result.rowCount
            });
        }

        return result;
    } catch (error) {
        console.error('‚ùå Erro na query:', {
            text: text.substring(0, 50) + '...',
            error: error.message,
            params: params
        });
        throw error;
    }
};

// Fun√ß√£o para executar transa√ß√µes
const transaction = async (callback) => {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');
        const result = await callback(client);
        await client.query('COMMIT');
        return result;
    } catch (error) {
        await client.query('ROLLBACK');
        throw error;
    } finally {
        client.release();
    }
};

// Fun√ß√£o para verificar se as tabelas existem
const checkTables = async () => {
    try {
        const result = await query(`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name IN ('usuarios', 'localidades', 'categorias_senha', 'cofre_senhas')
        `);

        const expectedTables = ['usuarios', 'localidades', 'categorias_senha', 'cofre_senhas'];
        const existingTables = result.rows.map(row => row.table_name);
        const missingTables = expectedTables.filter(table => !existingTables.includes(table));

        if (missingTables.length > 0) {
            console.warn('‚ö†Ô∏è Tabelas n√£o encontradas:', missingTables);
            console.log('üí° Execute o script database/database.sql para criar as tabelas');
            return false;
        }

        console.log('‚úÖ Todas as tabelas necess√°rias est√£o presentes');
        return true;
    } catch (error) {
        console.error('‚ùå Erro ao verificar tabelas:', error.message);
        return false;
    }
};

// Fun√ß√£o para inserir log de atividade
const logActivity = async (userId, action, table, recordId, description, ipAddress, userAgent) => {
    try {
        await query(`
            INSERT INTO log_atividades 
            (usuario_id, tipo_acao, tabela_afetada, registro_id, descricao, ip_address, user_agent)
            VALUES ($1, $2, $3, $4, $5, $6, $7)
        `, [userId, action, table, recordId, description, ipAddress, userAgent]);
    } catch (error) {
        console.error('‚ùå Erro ao inserir log de atividade:', error.message);
        // N√£o propagar o erro para n√£o interromper a opera√ß√£o principal
    }
};

// Fun√ß√£o para fechar o pool (√∫til para testes)
const closePool = async () => {
    try {
        await pool.end();
        console.log('üîå Pool de conex√µes PostgreSQL fechado');
    } catch (error) {
        console.error('‚ùå Erro ao fechar pool:', error.message);
    }
};

// Inicializar e testar conex√£o na inicializa√ß√£o
const initialize = async () => {
    console.log('üöÄ Inicializando conex√£o com PostgreSQL...');

    const connected = await testConnection();
    if (!connected) {
        console.error('‚ùå Falha ao conectar com o banco de dados');
        process.exit(1);
    }

    const tablesExist = await checkTables();
    if (!tablesExist) {
        console.warn('‚ö†Ô∏è Execute os scripts SQL para criar as tabelas');
    }

    return connected && tablesExist;
};

module.exports = {
    pool,
    query,
    transaction,
    testConnection,
    checkTables,
    logActivity,
    closePool,
    initialize
};
